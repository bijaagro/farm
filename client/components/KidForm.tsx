import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Baby, Plus } from "lucide-react";
import { AnimalGender } from "@shared/animal-types";

interface KidFormData {
  name: string;
  gender: AnimalGender;
  weight: string;
  status: "alive" | "stillborn" | "died_after_birth";
  markings: string;
  notes: string;
}

interface KidFormProps {
  isOpen: boolean;
  onClose: () => void;
  onAdd: (kidData: KidFormData) => void;
  motherName: string;
  birthDate: string;
  kidNumber: number;
}

export default function KidForm({
  isOpen,
  onClose,
  onAdd,
  motherName,
  birthDate,
  kidNumber,
}: KidFormProps) {
  const [formData, setFormData] = useState<KidFormData>({
    name: "",
    gender: "female",
    weight: "",
    status: "alive",
    markings: "",
    notes: "",
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onAdd(formData);
    handleClose();
  };

  const handleClose = () => {
    // Reset form
    setFormData({
      name: "",
      gender: "female",
      weight: "",
      status: "alive",
      markings: "",
      notes: "",
    });
    onClose();
  };

  const autoGeneratedName = `${motherName}-Kid-${kidNumber}-${new Date(birthDate || new Date()).getFullYear()}`;

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Baby className="h-5 w-5 text-pink-600" />
            Add Kid #{kidNumber}
          </DialogTitle>
          <DialogDescription>Enter details for the new kid</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Name (Optional)</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, name: e.target.value }))
              }
              placeholder={`Auto: ${autoGeneratedName}`}
            />
            <p className="text-xs text-gray-500">
              Leave empty to use auto-generated name
            </p>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="gender">Gender</Label>
              <Select
                value={formData.gender}
                onValueChange={(value: AnimalGender) =>
                  setFormData((prev) => ({ ...prev, gender: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="female">Female</SelectItem>
                  <SelectItem value="male">Male</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="weight">Birth Weight (kg)</Label>
              <Input
                id="weight"
                type="number"
                step="0.1"
                value={formData.weight}
                onChange={(e) =>
                  setFormData((prev) => ({ ...prev, weight: e.target.value }))
                }
                placeholder="e.g., 2.5"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="status">Status</Label>
            <Select
              value={formData.status}
              onValueChange={(
                value: "alive" | "stillborn" | "died_after_birth",
              ) => setFormData((prev) => ({ ...prev, status: value }))}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="alive">Alive</SelectItem>
                <SelectItem value="stillborn">Stillborn</SelectItem>
                <SelectItem value="died_after_birth">
                  Died After Birth
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="markings">Markings (Optional)</Label>
            <Input
              id="markings"
              value={formData.markings}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, markings: e.target.value }))
              }
              placeholder="e.g., white spot on forehead"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="notes">Notes (Optional)</Label>
            <Input
              id="notes"
              value={formData.notes}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, notes: e.target.value }))
              }
              placeholder="Additional notes about this kid"
            />
          </div>

          <div className="flex gap-2 pt-4">
            <Button
              type="submit"
              className="flex-1 bg-pink-600 hover:bg-pink-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Kid
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              className="flex-1"
            >
              Cancel
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
